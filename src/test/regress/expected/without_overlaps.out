-- Tests for WITHOUT OVERLAPS.
--
-- We leave behind several tables to test pg_dump etc:
-- temporal_rng, temporal_per, temporal_rng2, temporal_per2,
-- temporal_fk_{rng,per}2{rng,per}.
--
-- test input parser
--
-- PK with no columns just WITHOUT OVERLAPS:
CREATE TABLE temporal_rng (
	valid_at tsrange,
	CONSTRAINT temporal_rng_pk PRIMARY KEY (valid_at WITHOUT OVERLAPS)
);
ERROR:  syntax error at or near "WITHOUT"
LINE 3:  CONSTRAINT temporal_rng_pk PRIMARY KEY (valid_at WITHOUT OV...
                                                          ^
-- PK with a range column/PERIOD that isn't there:
CREATE TABLE temporal_rng (
	id INTEGER,
	CONSTRAINT temporal_rng_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
ERROR:  range or PERIOD "valid_at" named in WITHOUT OVERLAPS does not exist
-- PK with a non-range column:
CREATE TABLE temporal_rng (
	id INTEGER,
	valid_at TEXT,
	CONSTRAINT temporal_rng_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
ERROR:  column "valid_at" named in WITHOUT OVERLAPS is not a range type
-- PK with one column plus a range:
CREATE TABLE temporal_rng (
	-- Since we can't depend on having btree_gist here,
	-- use an int4range instead of an int.
	-- (The rangetypes regression test uses the same trick.)
	id int4range,
	valid_at tsrange,
	CONSTRAINT temporal_rng_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
\d temporal_rng
              Table "public.temporal_rng"
  Column  |   Type    | Collation | Nullable | Default 
----------+-----------+-----------+----------+---------
 id       | int4range |           | not null | 
 valid_at | tsrange   |           | not null | 
Indexes:
    "temporal_rng_pk" PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng_pk';
            pg_get_constraintdef             
---------------------------------------------
 PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng_pk';
                                pg_get_indexdef                                
-------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_rng_pk ON temporal_rng USING gist (id, valid_at)
(1 row)

-- PK with two columns plus a range:
CREATE TABLE temporal_rng2 (
	id1 int4range,
	id2 int4range,
	valid_at tsrange,
	CONSTRAINT temporal_rng2_pk PRIMARY KEY (id1, id2, valid_at WITHOUT OVERLAPS)
);
\d temporal_rng2
             Table "public.temporal_rng2"
  Column  |   Type    | Collation | Nullable | Default 
----------+-----------+-----------+----------+---------
 id1      | int4range |           | not null | 
 id2      | int4range |           | not null | 
 valid_at | tsrange   |           | not null | 
Indexes:
    "temporal_rng2_pk" PRIMARY KEY (id1, id2, valid_at WITHOUT OVERLAPS)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng2_pk';
               pg_get_constraintdef                
---------------------------------------------------
 PRIMARY KEY (id1, id2, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng2_pk';
                                    pg_get_indexdef                                    
---------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_rng2_pk ON temporal_rng2 USING gist (id1, id2, valid_at)
(1 row)

DROP TABLE temporal_rng2;
-- PK with one column plus a PERIOD:
CREATE TABLE temporal_per (
	id int4range,
	valid_from timestamp,
	valid_til timestamp,
	PERIOD FOR valid_at (valid_from, valid_til),
	CONSTRAINT temporal_per_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
\d temporal_per
                        Table "public.temporal_per"
   Column   |            Type             | Collation | Nullable | Default 
------------+-----------------------------+-----------+----------+---------
 id         | int4range                   |           | not null | 
 valid_from | timestamp without time zone |           |          | 
 valid_til  | timestamp without time zone |           |          | 
Periods:
    valid_at (valid_from, valid_til)
Indexes:
    "temporal_per_pk" PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
Check constraints:
    "temporal_per_valid_at_check" CHECK (valid_from < valid_til)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_per_pk';
            pg_get_constraintdef             
---------------------------------------------
 PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_per_pk';
                                           pg_get_indexdef                                           
-----------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_per_pk ON temporal_per USING gist (id, tsrange(valid_from, valid_til))
(1 row)

-- PK with two columns plus a PERIOD:
CREATE TABLE temporal_per2 (
	id1 int4range,
	id2 int4range,
	valid_from timestamp,
	valid_til timestamp,
	PERIOD FOR valid_at (valid_from, valid_til),
	CONSTRAINT temporal_per2_pk PRIMARY KEY (id1, id2, valid_at WITHOUT OVERLAPS)
);
\d temporal_per2
                       Table "public.temporal_per2"
   Column   |            Type             | Collation | Nullable | Default 
------------+-----------------------------+-----------+----------+---------
 id1        | int4range                   |           | not null | 
 id2        | int4range                   |           | not null | 
 valid_from | timestamp without time zone |           |          | 
 valid_til  | timestamp without time zone |           |          | 
Periods:
    valid_at (valid_from, valid_til)
Indexes:
    "temporal_per2_pk" PRIMARY KEY (id1, id2, valid_at WITHOUT OVERLAPS)
Check constraints:
    "temporal_per2_valid_at_check" CHECK (valid_from < valid_til)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_per2_pk';
               pg_get_constraintdef                
---------------------------------------------------
 PRIMARY KEY (id1, id2, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_per2_pk';
                                               pg_get_indexdef                                               
-------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_per2_pk ON temporal_per2 USING gist (id1, id2, tsrange(valid_from, valid_til))
(1 row)

DROP TABLE temporal_per2;
-- PK with a custom range type:
CREATE TYPE textrange2 AS range (subtype=text, collation="C");
CREATE TABLE temporal_rng2 (
	id int4range,
	valid_at textrange2,
	CONSTRAINT temporal_rng2_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
ALTER TABLE temporal_rng2 DROP CONSTRAINT temporal_rng2_pk;
DROP TABLE temporal_rng2;
DROP TYPE textrange2;
-- UNIQUE with no columns just WITHOUT OVERLAPS:
CREATE TABLE temporal_rng2 (
	valid_at tsrange,
	CONSTRAINT temporal_rng2_uq UNIQUE (valid_at WITHOUT OVERLAPS)
);
ERROR:  syntax error at or near "WITHOUT"
LINE 3:  CONSTRAINT temporal_rng2_uq UNIQUE (valid_at WITHOUT OVERLA...
                                                      ^
-- UNIQUE with a range column/PERIOD that isn't there:
CREATE TABLE temporal_rng2 (
	id INTEGER,
	CONSTRAINT temporal_rng2_uq UNIQUE (id, valid_at WITHOUT OVERLAPS)
);
ERROR:  range or PERIOD "valid_at" named in WITHOUT OVERLAPS does not exist
-- UNIQUE with a non-range column:
CREATE TABLE temporal_rng2 (
	id INTEGER,
	valid_at TEXT,
	CONSTRAINT temporal_rng2_uq UNIQUE (id, valid_at WITHOUT OVERLAPS)
);
ERROR:  column "valid_at" named in WITHOUT OVERLAPS is not a range type
-- UNIQUE with one column plus a range:
CREATE TABLE temporal_rng2 (
	-- Since we can't depend on having btree_gist here,
	-- use an int4range instead of an int.
	-- (The rangetypes regression test uses the same trick.)
	id int4range,
	valid_at tsrange,
	CONSTRAINT temporal_rng2_uq UNIQUE (id, valid_at WITHOUT OVERLAPS)
);
\d temporal_rng2
             Table "public.temporal_rng2"
  Column  |   Type    | Collation | Nullable | Default 
----------+-----------+-----------+----------+---------
 id       | int4range |           |          | 
 valid_at | tsrange   |           | not null | 
Indexes:
    "temporal_rng2_uq" UNIQUE (id, valid_at WITHOUT OVERLAPS)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng2_uq';
          pg_get_constraintdef          
----------------------------------------
 UNIQUE (id, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng2_uq';
                                 pg_get_indexdef                                 
---------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_rng2_uq ON temporal_rng2 USING gist (id, valid_at)
(1 row)

-- UNIQUE with two columns plus a range:
CREATE TABLE temporal_rng3 (
	id1 int4range,
	id2 int4range,
	valid_at tsrange,
	CONSTRAINT temporal_rng3_uq UNIQUE (id1, id2, valid_at WITHOUT OVERLAPS)
);
\d temporal_rng3
             Table "public.temporal_rng3"
  Column  |   Type    | Collation | Nullable | Default 
----------+-----------+-----------+----------+---------
 id1      | int4range |           |          | 
 id2      | int4range |           |          | 
 valid_at | tsrange   |           | not null | 
Indexes:
    "temporal_rng3_uq" UNIQUE (id1, id2, valid_at WITHOUT OVERLAPS)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng3_uq';
             pg_get_constraintdef             
----------------------------------------------
 UNIQUE (id1, id2, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng3_uq';
                                    pg_get_indexdef                                    
---------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_rng3_uq ON temporal_rng3 USING gist (id1, id2, valid_at)
(1 row)

DROP TABLE temporal_rng3;
-- UNIQUE with one column plus a PERIOD:
CREATE TABLE temporal_per2 (
	id int4range,
	valid_from timestamp,
	valid_til timestamp,
	PERIOD FOR valid_at (valid_from, valid_til),
	CONSTRAINT temporal_per2_uq UNIQUE (id, valid_at WITHOUT OVERLAPS)
);
\d temporal_per2
                       Table "public.temporal_per2"
   Column   |            Type             | Collation | Nullable | Default 
------------+-----------------------------+-----------+----------+---------
 id         | int4range                   |           |          | 
 valid_from | timestamp without time zone |           |          | 
 valid_til  | timestamp without time zone |           |          | 
Periods:
    valid_at (valid_from, valid_til)
Indexes:
    "temporal_per2_uq" UNIQUE (id, valid_at WITHOUT OVERLAPS)
Check constraints:
    "temporal_per2_valid_at_check" CHECK (valid_from < valid_til)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_per2_uq';
          pg_get_constraintdef          
----------------------------------------
 UNIQUE (id, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_per2_uq';
                                            pg_get_indexdef                                            
-------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_per2_uq ON temporal_per2 USING gist (id, tsrange(valid_from, valid_til))
(1 row)

-- UNIQUE with two columns plus a PERIOD:
CREATE TABLE temporal_per3 (
	id1 int4range,
	id2 int4range,
	valid_from timestamp,
	valid_til timestamp,
	PERIOD FOR valid_at (valid_from, valid_til),
	CONSTRAINT temporal_per3_uq UNIQUE (id1, id2, valid_at WITHOUT OVERLAPS)
);
\d temporal_per3
                       Table "public.temporal_per3"
   Column   |            Type             | Collation | Nullable | Default 
------------+-----------------------------+-----------+----------+---------
 id1        | int4range                   |           |          | 
 id2        | int4range                   |           |          | 
 valid_from | timestamp without time zone |           |          | 
 valid_til  | timestamp without time zone |           |          | 
Periods:
    valid_at (valid_from, valid_til)
Indexes:
    "temporal_per3_uq" UNIQUE (id1, id2, valid_at WITHOUT OVERLAPS)
Check constraints:
    "temporal_per3_valid_at_check" CHECK (valid_from < valid_til)

SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_per3_uq';
             pg_get_constraintdef             
----------------------------------------------
 UNIQUE (id1, id2, valid_at WITHOUT OVERLAPS)
(1 row)

SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_per3_uq';
                                               pg_get_indexdef                                               
-------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX temporal_per3_uq ON temporal_per3 USING gist (id1, id2, tsrange(valid_from, valid_til))
(1 row)

DROP TABLE temporal_per3;
-- UNIQUE with a custom range type:
CREATE TYPE textrange2 AS range (subtype=text, collation="C");
CREATE TABLE temporal_per3 (
	id int4range,
	valid_at textrange2,
	CONSTRAINT temporal_per3_uq UNIQUE (id, valid_at WITHOUT OVERLAPS)
);
ALTER TABLE temporal_per3 DROP CONSTRAINT temporal_per3_uq;
DROP TABLE temporal_per3;
DROP TYPE textrange2;
--
-- test ALTER TABLE ADD CONSTRAINT
--
DROP TABLE temporal_rng;
CREATE TABLE temporal_rng (
	id int4range,
	valid_at tsrange
);
ALTER TABLE temporal_rng
	ADD CONSTRAINT temporal_rng_pk
	PRIMARY KEY (id, valid_at WITHOUT OVERLAPS);
-- PK with USING INDEX (not possible):
CREATE TABLE temporal3 (
	id int4range,
	valid_at tsrange
);
CREATE INDEX idx_temporal3_uq ON temporal3 USING gist (id, valid_at);
ALTER TABLE temporal3
	ADD CONSTRAINT temporal3_pk
	PRIMARY KEY USING INDEX idx_temporal3_uq;
ERROR:  "idx_temporal3_uq" is not a unique index
LINE 2:  ADD CONSTRAINT temporal3_pk
             ^
DETAIL:  Cannot create a primary key or unique constraint using such an index.
DROP TABLE temporal3;
-- UNIQUE with USING INDEX (not possible):
CREATE TABLE temporal3 (
	id int4range,
	valid_at tsrange
);
CREATE INDEX idx_temporal3_uq ON temporal3 USING gist (id, valid_at);
ALTER TABLE temporal3
	ADD CONSTRAINT temporal3_uq
	UNIQUE USING INDEX idx_temporal3_uq;
ERROR:  "idx_temporal3_uq" is not a unique index
LINE 2:  ADD CONSTRAINT temporal3_uq
             ^
DETAIL:  Cannot create a primary key or unique constraint using such an index.
DROP TABLE temporal3;
-- Add range column and the PK at the same time
CREATE TABLE temporal3 (
	id int4range
);
ALTER TABLE temporal3
	ADD COLUMN valid_at tsrange,
	ADD CONSTRAINT temporal3_pk
	PRIMARY KEY (id, valid_at WITHOUT OVERLAPS);
DROP TABLE temporal3;
-- Add PERIOD and the PK at the same time
CREATE TABLE temporal3 (
	id int4range,
	valid_from date,
	valid_til date
);
ALTER TABLE temporal3
	ADD PERIOD FOR valid_at (valid_from, valid_til),
	ADD CONSTRAINT temporal3_pk
	PRIMARY KEY (id, valid_at WITHOUT OVERLAPS);
DROP TABLE temporal3;
-- Add range column and UNIQUE constraint at the same time
CREATE TABLE temporal3 (
	id int4range
);
ALTER TABLE temporal3
	ADD COLUMN valid_at tsrange,
	ADD CONSTRAINT temporal3_uq
	UNIQUE (id, valid_at WITHOUT OVERLAPS);
DROP TABLE temporal3;
-- Add PERIOD column and UNIQUE constraint at the same time
CREATE TABLE temporal3 (
	id int4range,
	valid_from date,
	valid_til date
);
ALTER TABLE temporal3
	ADD PERIOD FOR valid_at (valid_from, valid_til),
	ADD CONSTRAINT temporal3_uq
	UNIQUE (id, valid_at WITHOUT OVERLAPS);
DROP TABLE temporal3;
-- Add date columns, PERIOD, and the PK at the same time
CREATE TABLE temporal3 (
	id int4range
);
ALTER TABLE temporal3
	ADD COLUMN valid_from date,
	ADD COLUMN valid_til date,
	ADD PERIOD FOR valid_at (valid_from, valid_til),
	ADD CONSTRAINT temporal3_pk
	PRIMARY KEY (id, valid_at WITHOUT OVERLAPS);
DROP TABLE temporal3;
-- Add date columns, PERIOD, and UNIQUE constraint at the same time
CREATE TABLE temporal3 (
	id int4range
);
ALTER TABLE temporal3
	ADD COLUMN valid_from date,
	ADD COLUMN valid_til date,
	ADD PERIOD FOR valid_at (valid_from, valid_til),
	ADD CONSTRAINT temporal3_uq
	UNIQUE (id, valid_at WITHOUT OVERLAPS);
DROP TABLE temporal3;
--
-- test PK inserts
--
-- okay:
INSERT INTO temporal_rng VALUES ('[1,1]', tsrange('2018-01-02', '2018-02-03'));
INSERT INTO temporal_rng VALUES ('[1,1]', tsrange('2018-03-03', '2018-04-04'));
INSERT INTO temporal_rng VALUES ('[2,2]', tsrange('2018-01-01', '2018-01-05'));
INSERT INTO temporal_rng VALUES ('[3,3]', tsrange('2018-01-01', NULL));
-- should fail:
INSERT INTO temporal_rng VALUES ('[1,1]', tsrange('2018-01-01', '2018-01-05'));
ERROR:  conflicting key value violates exclusion constraint "temporal_rng_pk"
DETAIL:  Key (id, valid_at)=([1,2), ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018")) conflicts with existing key (id, valid_at)=([1,2), ["Tue Jan 02 00:00:00 2018","Sat Feb 03 00:00:00 2018")).
INSERT INTO temporal_rng VALUES (NULL, tsrange('2018-01-01', '2018-01-05'));
ERROR:  null value in column "id" of relation "temporal_rng" violates not-null constraint
DETAIL:  Failing row contains (null, ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018")).
INSERT INTO temporal_rng VALUES ('[3,3]', NULL);
ERROR:  null value in column "valid_at" of relation "temporal_rng" violates not-null constraint
DETAIL:  Failing row contains ([3,4), null).
--
-- test a range with both a PK and a UNIQUE constraint
--
CREATE TABLE temporal3 (
  id int4range,
  valid_at daterange,
  id2 int8range,
  name TEXT,
  CONSTRAINT temporal3_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS),
  CONSTRAINT temporal3_uniq UNIQUE (id2, valid_at WITHOUT OVERLAPS)
);
INSERT INTO temporal3 (id, valid_at, id2, name)
  VALUES
  ('[1,1]', daterange('2000-01-01', '2010-01-01'), '[7,7]', 'foo'),
  ('[2,2]', daterange('2000-01-01', '2010-01-01'), '[9,9]', 'bar')
;
UPDATE temporal3 FOR PORTION OF valid_at FROM '2000-05-01' TO '2000-07-01'
  SET name = name || '1';
UPDATE temporal3 FOR PORTION OF valid_at FROM '2000-04-01' TO '2000-06-01'
  SET name = name || '2'
  WHERE id = '[2,2]';
SELECT * FROM temporal3 ORDER BY id, valid_at;
  id   |        valid_at         |  id2   | name  
-------+-------------------------+--------+-------
 [1,2) | [01-01-2000,05-01-2000) | [7,8)  | foo
 [1,2) | [05-01-2000,07-01-2000) | [7,8)  | foo1
 [1,2) | [07-01-2000,01-01-2010) | [7,8)  | foo
 [2,3) | [01-01-2000,04-01-2000) | [9,10) | bar
 [2,3) | [04-01-2000,05-01-2000) | [9,10) | bar2
 [2,3) | [05-01-2000,06-01-2000) | [9,10) | bar12
 [2,3) | [06-01-2000,07-01-2000) | [9,10) | bar1
 [2,3) | [07-01-2000,01-01-2010) | [9,10) | bar
(8 rows)

-- conflicting id only:
INSERT INTO temporal3 (id, valid_at, id2, name)
  VALUES
  ('[1,1]', daterange('2005-01-01', '2006-01-01'), '[8,8]', 'foo3');
ERROR:  conflicting key value violates exclusion constraint "temporal3_pk"
DETAIL:  Key (id, valid_at)=([1,2), [01-01-2005,01-01-2006)) conflicts with existing key (id, valid_at)=([1,2), [07-01-2000,01-01-2010)).
-- conflicting id2 only:
INSERT INTO temporal3 (id, valid_at, id2, name)
  VALUES
  ('[3,3]', daterange('2005-01-01', '2010-01-01'), '[9,9]', 'bar3')
;
ERROR:  conflicting key value violates exclusion constraint "temporal3_uniq"
DETAIL:  Key (id2, valid_at)=([9,10), [01-01-2005,01-01-2010)) conflicts with existing key (id2, valid_at)=([9,10), [07-01-2000,01-01-2010)).
DROP TABLE temporal3;
--
-- test a PERIOD with both a PK and a UNIQUE constraint
--
CREATE TABLE temporal3 (
  id int4range,
	valid_from date,
	valid_til date,
	PERIOD FOR valid_at (valid_from, valid_til),
  id2 int8range,
  name TEXT,
  CONSTRAINT temporal3_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS),
  CONSTRAINT temporal3_uniq UNIQUE (id2, valid_at WITHOUT OVERLAPS)
);
INSERT INTO temporal3 (id, valid_from, valid_til, id2, name)
  VALUES
  ('[1,1]', '2000-01-01', '2010-01-01', '[7,7]', 'foo'),
  ('[2,2]', '2000-01-01', '2010-01-01', '[9,9]', 'bar')
;
UPDATE temporal3 FOR PORTION OF valid_at FROM '2000-05-01' TO '2000-07-01'
  SET name = name || '1';
UPDATE temporal3 FOR PORTION OF valid_at FROM '2000-04-01' TO '2000-06-01'
  SET name = name || '2'
  WHERE id = '[2,2]';
SELECT * FROM temporal3 ORDER BY id, valid_from, valid_til;
  id   | valid_from | valid_til  |  id2   | name  
-------+------------+------------+--------+-------
 [1,2) | 01-01-2000 | 05-01-2000 | [7,8)  | foo
 [1,2) | 05-01-2000 | 07-01-2000 | [7,8)  | foo1
 [1,2) | 07-01-2000 | 01-01-2010 | [7,8)  | foo
 [2,3) | 01-01-2000 | 04-01-2000 | [9,10) | bar
 [2,3) | 04-01-2000 | 05-01-2000 | [9,10) | bar2
 [2,3) | 05-01-2000 | 06-01-2000 | [9,10) | bar12
 [2,3) | 06-01-2000 | 07-01-2000 | [9,10) | bar1
 [2,3) | 07-01-2000 | 01-01-2010 | [9,10) | bar
(8 rows)

-- conflicting id only:
INSERT INTO temporal3 (id, valid_from, valid_til, id2, name)
  VALUES
  ('[1,1]', '2005-01-01', '2006-01-01', '[8,8]', 'foo3');
ERROR:  conflicting key value violates exclusion constraint "temporal3_pk"
DETAIL:  Key (id, daterange(valid_from, valid_til))=([1,2), [01-01-2005,01-01-2006)) conflicts with existing key (id, daterange(valid_from, valid_til))=([1,2), [07-01-2000,01-01-2010)).
-- conflicting id2 only:
INSERT INTO temporal3 (id, valid_from, valid_til, id2, name)
  VALUES
  ('[3,3]', '2005-01-01', '2010-01-01', '[9,9]', 'bar3')
;
ERROR:  conflicting key value violates exclusion constraint "temporal3_uniq"
DETAIL:  Key (id2, daterange(valid_from, valid_til))=([9,10), [01-01-2005,01-01-2010)) conflicts with existing key (id2, daterange(valid_from, valid_til))=([9,10), [07-01-2000,01-01-2010)).
DROP TABLE temporal3;
--
-- test changing the PK's dependencies
--
CREATE TABLE temporal3 (
	id int4range,
	valid_at tsrange,
	CONSTRAINT temporal3_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
ALTER TABLE temporal3 ALTER COLUMN valid_at DROP NOT NULL;
ERROR:  column "valid_at" is in a primary key
ALTER TABLE temporal3 ALTER COLUMN valid_at TYPE tstzrange USING tstzrange(lower(valid_at), upper(valid_at));
ALTER TABLE temporal3 RENAME COLUMN valid_at TO valid_thru;
ALTER TABLE temporal3 DROP COLUMN valid_thru;
DROP TABLE temporal3;
--
-- test PARTITION BY for ranges
--
CREATE TABLE temporal_partitioned (
	id int4range,
	valid_at daterange,
	CONSTRAINT temporal_paritioned_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
) PARTITION BY LIST (id);
ERROR:  cannot match partition key to an index using access method "gist"
-- TODO: attach some partitions, insert into them, update them with and without FOR PORTION OF, delete them the same way.
--
-- test PARTITION BY for PERIODS
--
CREATE TABLE temporal_partitioned (
  id int4range,
  valid_from TIMESTAMP,
  valid_til TIMESTAMP,
  PERIOD FOR valid_at (valid_from, valid_til),
	CONSTRAINT temporal_paritioned_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
) PARTITION BY LIST (id);
ERROR:  cannot match partition key to an index using access method "gist"
-- TODO: attach some partitions, insert into them, update them with and without FOR PORTION OF, delete them the same way.
