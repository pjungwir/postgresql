-- Tests for multirange data types.
--
-- test input parser
--
-- negative tests; should fail
select ''::textmultirange;
ERROR:  malformed multirange literal: ""
LINE 1: select ''::textmultirange;
               ^
DETAIL:  Missing left bracket.
select '{,}'::textmultirange;
ERROR:  malformed multirange literal: "{,}"
LINE 1: select '{,}'::textmultirange;
               ^
DETAIL:  Expected range start.
select '{[a,c),}'::textmultirange;
ERROR:  malformed multirange literal: "{[a,c),}"
LINE 1: select '{[a,c),}'::textmultirange;
               ^
DETAIL:  Expected range start.
select '{,[a,c)}'::textmultirange;
ERROR:  malformed multirange literal: "{,[a,c)}"
LINE 1: select '{,[a,c)}'::textmultirange;
               ^
DETAIL:  Expected range start.
select '{-[a,z)}'::textmultirange;
ERROR:  malformed multirange literal: "{-[a,z)}"
LINE 1: select '{-[a,z)}'::textmultirange;
               ^
DETAIL:  Expected range start.
select '{[a,z) - }'::textmultirange;
ERROR:  malformed multirange literal: "{[a,z) - }"
LINE 1: select '{[a,z) - }'::textmultirange;
               ^
DETAIL:  Expected comma or end of multirange.
select '{(",a)}'::textmultirange;
ERROR:  malformed multirange literal: "{(",a)}"
LINE 1: select '{(",a)}'::textmultirange;
               ^
DETAIL:  Unexpected end of input.
select '{(,,a)}'::textmultirange;
ERROR:  malformed range literal: "(,,a)"
LINE 1: select '{(,,a)}'::textmultirange;
               ^
DETAIL:  Too many commas.
select '{(),a)}'::textmultirange;
ERROR:  malformed range literal: "()"
LINE 1: select '{(),a)}'::textmultirange;
               ^
DETAIL:  Missing comma after lower bound.
select '{(a,))}'::textmultirange;
ERROR:  malformed multirange literal: "{(a,))}"
LINE 1: select '{(a,))}'::textmultirange;
               ^
DETAIL:  Expected comma or end of multirange.
select '{(],a)}'::textmultirange;
ERROR:  malformed range literal: "(]"
LINE 1: select '{(],a)}'::textmultirange;
               ^
DETAIL:  Missing comma after lower bound.
select '{(a,])}'::textmultirange;
ERROR:  malformed multirange literal: "{(a,])}"
LINE 1: select '{(a,])}'::textmultirange;
               ^
DETAIL:  Expected comma or end of multirange.
select '{[z,a]}'::textmultirange;
ERROR:  range lower bound must be less than or equal to range upper bound
LINE 1: select '{[z,a]}'::textmultirange;
               ^
-- should succeed
select '{}'::textmultirange;
 textmultirange 
----------------
 {}
(1 row)

select '  {}  '::textmultirange;
 textmultirange 
----------------
 {}
(1 row)

select ' { empty, empty }  '::textmultirange;
 textmultirange 
----------------
 {}
(1 row)

select ' {( " a " " a ", " z " " z " )  }'::textmultirange;
       textmultirange       
----------------------------
 {("  a   a ","  z   z  ")}
(1 row)

select '{(,z)}'::textmultirange;
 textmultirange 
----------------
 {(,z)}
(1 row)

select '{(a,)}'::textmultirange;
 textmultirange 
----------------
 {(a,)}
(1 row)

select '{[,z]}'::textmultirange;
 textmultirange 
----------------
 {(,z]}
(1 row)

select '{[a,]}'::textmultirange;
 textmultirange 
----------------
 {[a,)}
(1 row)

select '{(,)}'::textmultirange;
 textmultirange 
----------------
 {(,)}
(1 row)

select '{[ , ]}'::textmultirange;
 textmultirange 
----------------
 {[" "," "]}
(1 row)

select '{["",""]}'::textmultirange;
 textmultirange 
----------------
 {["",""]}
(1 row)

select '{[",",","]}'::textmultirange;
 textmultirange 
----------------
 {[",",","]}
(1 row)

select '{["\\","\\"]}'::textmultirange;
 textmultirange 
----------------
 {["\\","\\"]}
(1 row)

select '{(\\,a)}'::textmultirange;
 textmultirange 
----------------
 {("\\",a)}
(1 row)

select '{((,z)}'::textmultirange;
 textmultirange 
----------------
 {("(",z)}
(1 row)

select '{([,z)}'::textmultirange;
 textmultirange 
----------------
 {("[",z)}
(1 row)

select '{(!,()}'::textmultirange;
 textmultirange 
----------------
 {(!,"(")}
(1 row)

select '{(!,[)}'::textmultirange;
 textmultirange 
----------------
 {(!,"[")}
(1 row)

select '{[a,a]}'::textmultirange;
 textmultirange 
----------------
 {[a,a]}
(1 row)

select '{[a,a],[a,b]}'::textmultirange;
 textmultirange 
----------------
 {[a,b]}
(1 row)

select '{[a,b), [b,e]}'::textmultirange;
 textmultirange 
----------------
 {[a,e]}
(1 row)

select '{[a,d), [b,f]}'::textmultirange;
 textmultirange 
----------------
 {[a,f]}
(1 row)

select '{[a,a],[b,b]}'::textmultirange;
 textmultirange 
----------------
 {[a,a],[b,b]}
(1 row)

-- without canonicalization, we can't join these:
select '{[a,a], [b,b]}'::textmultirange;
 textmultirange 
----------------
 {[a,a],[b,b]}
(1 row)

-- with canonicalization, we can join these:
select '{[1,2], [3,4]}'::int4multirange;
 int4multirange 
----------------
 {[1,5)}
(1 row)

select '{[a,a], [b,b], [c,c]}'::textmultirange;
   textmultirange    
---------------------
 {[a,a],[b,b],[c,c]}
(1 row)

select '{[a,d], [b,e]}'::textmultirange;
 textmultirange 
----------------
 {[a,e]}
(1 row)

select '{[a,d), [d,e)}'::textmultirange;
 textmultirange 
----------------
 {[a,e)}
(1 row)

-- these are allowed but normalize to empty:
select '{[a,a)}'::textmultirange;
 textmultirange 
----------------
 {}
(1 row)

select '{(a,a]}'::textmultirange;
 textmultirange 
----------------
 {}
(1 row)

select '{(a,a)}'::textmultirange;
 textmultirange 
----------------
 {}
(1 row)

--
-- test the constructor
---
select textmultirange();
 textmultirange 
----------------
 {}
(1 row)

select textmultirange(textrange('a', 'c'));
 textmultirange 
----------------
 {[a,c)}
(1 row)

select textmultirange(textrange('a', 'c'), textrange('f', 'g'));
 textmultirange 
----------------
 {[a,c),[f,g)}
(1 row)

select textmultirange(textrange('a', 'c'), textrange('b', 'd'));
 textmultirange 
----------------
 {[a,d)}
(1 row)

--
-- create some test data and test the operators
--
CREATE TABLE nummultirange_test (nmr NUMMULTIRANGE);
CREATE INDEX nummultirange_test_btree ON nummultirange_test(nmr);
INSERT INTO nummultirange_test VALUES('{}');
INSERT INTO nummultirange_test VALUES('{[,)}');
INSERT INTO nummultirange_test VALUES('{[3,]}');
INSERT INTO nummultirange_test VALUES('{[,), [3,]}');
INSERT INTO nummultirange_test VALUES('{[, 5)}');
INSERT INTO nummultirange_test VALUES(nummultirange());
INSERT INTO nummultirange_test VALUES(nummultirange(variadic '{}'::numrange[]));
INSERT INTO nummultirange_test VALUES(nummultirange(numrange(1.1, 2.2)));
INSERT INTO nummultirange_test VALUES('{empty}');
INSERT INTO nummultirange_test VALUES(nummultirange(numrange(1.7, 1.7, '[]'), numrange(1.7, 1.9)));
INSERT INTO nummultirange_test VALUES(nummultirange(numrange(1.7, 1.7, '[]'), numrange(1.9, 2.1)));
SELECT nmr, isempty(nmr) FROM nummultirange_test ORDER BY nmr;
          nmr          | isempty 
-----------------------+---------
 {}                    | t
 {}                    | t
 {}                    | t
 {}                    | t
 {(,5)}                | f
 {(,)}                 | f
 {(,)}                 | f
 {[1.1,2.2)}           | f
 {[1.7,1.7],[1.9,2.1)} | f
 {[1.7,1.9)}           | f
 {[3,)}                | f
(11 rows)

-- overlaps
SELECT * FROM nummultirange_test WHERE range_overlaps_multirange(numrange(4.0, 4.2), nmr);
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE numrange(4.0, 4.2) && nmr;
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE multirange_overlaps_range(nmr, numrange(4.0, 4.2));
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE nmr && numrange(4.0, 4.2);
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE multirange_overlaps_multirange(nmr, nummultirange(numrange(4.0, 4.2), numrange(6.0, 7.0)));
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(4.0, 4.2), numrange(6.0, 7.0));
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(6.0, 7.0));
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
(3 rows)

SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(6.0, 7.0), numrange(8.0, 9.0));
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
(3 rows)

-- mr contains x
SELECT * FROM nummultirange_test WHERE multirange_contains_elem(nmr, 4.0);
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE nmr @> 4.0;
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE multirange_contains_range(nmr, numrange(4.0, 4.2));
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE nmr @> numrange(4.0, 4.2);
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE multirange_contains_multirange(nmr, '{[4.0,4.2), [6.0, 8.0)}');
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
(3 rows)

SELECT * FROM nummultirange_test WHERE nmr @> '{[4.0,4.2), [6.0, 8.0)}'::nummultirange;
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
(3 rows)

-- x is contained by mr
SELECT * FROM nummultirange_test WHERE elem_contained_by_multirange(4.0, nmr);
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE 4.0 <@ nmr;
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE range_contained_by_multirange(numrange(4.0, 4.2), nmr);
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE numrange(4.0, 4.2) <@ nmr;
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
 {(,5)}
(4 rows)

SELECT * FROM nummultirange_test WHERE multirange_contained_by_multirange('{[4.0,4.2), [6.0, 8.0)}', nmr);
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
(3 rows)

SELECT * FROM nummultirange_test WHERE '{[4.0,4.2), [6.0, 8.0)}'::nummultirange <@ nmr;
  nmr   
--------
 {(,)}
 {[3,)}
 {(,)}
(3 rows)

-- TODO: more, see rangetypes.sql
SELECT 'empty'::numrange && nummultirange();
 ?column? 
----------
 f
(1 row)

SELECT 'empty'::numrange && nummultirange(numrange(1,2));
 ?column? 
----------
 f
(1 row)

SELECT nummultirange() && 'empty'::numrange;
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(1,2)) && 'empty'::numrange;
 ?column? 
----------
 f
(1 row)

SELECT nummultirange() && nummultirange();
 ?column? 
----------
 f
(1 row)

SELECT nummultirange() && nummultirange(numrange(1,2));
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(1,2)) && nummultirange();
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(3,4)) && nummultirange(numrange(1,2), numrange(7,8));
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(3,4)) && nummultirange(numrange(1,2), numrange(3.5,8));
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(1,2), numrange(3.5,8)) && numrange(3,4);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(1,2), numrange(3.5,8)) && nummultirange(numrange(3,4));
 ?column? 
----------
 t
(1 row)

SELECT nummultirange() @> nummultirange();
 ?column? 
----------
 t
(1 row)

SELECT nummultirange() @> 'empty'::numrange;
 ?column? 
----------
 t
(1 row)

SELECT 'empty'::numrange <@ nummultirange();
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(null,null)) @> numrange(1,2);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(null,null)) @> numrange(null,2);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(null,null)) @> numrange(2,null);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(null,5)) @> numrange(null,3);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(null,5)) @> numrange(null,8);
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(5,null)) @> numrange(8,null);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(5,null)) @> numrange(3,null);
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(1,5)) @> numrange(8,9);
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(1,5)) @> numrange(3,9);
 ?column? 
----------
 f
(1 row)

SELECT nummultirange(numrange(1,5)) @> numrange(1,4);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(1,5)) @> numrange(1,5);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(-4,-2), numrange(1,5)) @> numrange(1,5);
 ?column? 
----------
 t
(1 row)

SELECT nummultirange(numrange(1,5), numrange(8,9)) @> numrange(1,5);
 ?column? 
----------
 t
(1 row)

-- TODO: more, see rangetypes.sql
-- first, verify non-indexed results
SET enable_seqscan    = t;
SET enable_indexscan  = f;
SET enable_bitmapscan = f;
select * from nummultirange_test where nmr = '{[3,]}';
  nmr   
--------
 {[3,)}
(1 row)

-- TODO: more, see rangetypes.sql
-- now check same queries using index
SET enable_seqscan    = f;
SET enable_indexscan  = t;
SET enable_bitmapscan = f;
select * from nummultirange_test where nmr = '{[3,]}';
  nmr   
--------
 {[3,)}
(1 row)

-- TODO: more, see rangetypes.sql
RESET enable_seqscan;
RESET enable_indexscan;
RESET enable_bitmapscan;
-- TODO: more, see rangetypes.sql
