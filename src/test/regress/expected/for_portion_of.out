-- Tests for UPDATE/DELETE FOR PORTION OF
-- Fails on tables without a temporal PK:
CREATE TABLE for_portion_of_test (
  id int4range PRIMARY KEY,
  valid_at tsrange NOT NULL,
  name text NOT NULL
);
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-15' TO 'Infinity'
SET name = 'foo';
ERROR:  relation "for_portion_of_test" does not have a temporal primary key
LINE 2: FOR PORTION OF valid_at FROM '2018-01-15' TO 'Infinity'
                       ^
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-15' TO 'Infinity';
ERROR:  relation "for_portion_of_test" does not have a temporal primary key
LINE 2: FOR PORTION OF valid_at FROM '2018-01-15' TO 'Infinity';
                       ^
DROP TABLE for_portion_of_test;
CREATE TABLE for_portion_of_test (
  id int4range NOT NULL,
  valid_at tsrange NOT NULL,
  name text NOT NULL,
	CONSTRAINT for_portion_of_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
INSERT INTO for_portion_of_test
VALUES
('[1,2)', '[2018-01-02,2018-02-03)', 'one'),
('[1,2)', '[2018-02-03,2018-03-03)', 'one'),
('[1,2)', '[2018-03-03,2018-04-04)', 'one'),
('[2,3)', '[2018-01-01,2018-01-05)', 'two'),
('[3,4)', '[2018-01-01,)', 'three'),
('[4,5)', '(,2018-04-01)', 'four'),
('[5,6)', '(,)', 'five')
;
--
-- UPDATE tests
--
-- Setting with a missing column fails
UPDATE for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO 'Infinity'
SET name = 'foo'
WHERE id = '[5,6)';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO 'Infinity'
                       ^
-- Setting the range fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO 'Infinity'
SET valid_at = '[1990-01-01,1999-01-01)'
WHERE id = '[5,6)';
ERROR:  multiple assignments to same column "valid_at"
-- Setting with timestamps reversed fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
SET name = 'three^1'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM 'Infinity' TO '-Infinity'
SET name = 'three^1'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Setting with timestamps equal does nothing
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
SET name = 'three^0'
WHERE id = '[3,4)';
-- Updating a finite/open portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO 'Infinity'
SET name = 'three^1'
WHERE id = '[3,4)';
-- Updating a finite/open portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '-Infinity' TO '2018-03-01'
SET name = 'three^2'
WHERE id = '[3,4)';
-- Updating an open/finite portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '-Infinity' TO '2018-02-01'
SET name = 'four^1'
WHERE id = '[4,5)';
-- Updating an open/finite portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO 'Infinity'
SET name = 'four^2'
WHERE id = '[4,5)';
-- Updating a finite/finite portion with an exact fit
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2018-02-01'
SET name = 'four^3'
WHERE id = '[4,5)';
-- Updating an enclosed span
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '-Infinity' TO 'Infinity'
SET name = 'two^2'
WHERE id = '[2,3)';
-- Updating an open/open portion with a finite/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-01' TO '2019-01-01'
SET name = 'five^2'
WHERE id = '[5,6)';
-- Updating an enclosed span with separate protruding spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2020-01-01'
SET name = 'five^3'
WHERE id = '[5,6)';
-- Updating multiple enclosed spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '-Infinity' TO 'Infinity'
SET name = 'one^2'
WHERE id = '[1,2)';
-- Updating the non-range part of the PK:
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-02-15' TO 'Infinity'
SET id = '[6,7)'
WHERE id = '[1,2)';
-- UPDATE with no WHERE clause
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2030-01-01' TO 'Infinity'
SET name = name || '*';
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |   name   
-------+---------------------------------------------------------+----------
 [1,2) | ["Tue Jan 02 00:00:00 2018","Sat Feb 03 00:00:00 2018") | one^2
 [1,2) | ["Sat Feb 03 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | three
 [3,4) | ["Fri Jun 01 00:00:00 2018","Tue Jan 01 00:00:00 2030") | three^1
 [3,4) | ["Tue Jan 01 00:00:00 2030",)                           | three^1*
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Tue Jan 01 00:00:00 2019") | five^3
 [5,6) | ["Tue Jan 01 00:00:00 2019","Wed Jan 01 00:00:00 2020") | five^3
 [5,6) | ["Wed Jan 01 00:00:00 2020","Tue Jan 01 00:00:00 2030") | five
 [5,6) | ["Tue Jan 01 00:00:00 2030",)                           | five*
 [6,7) | ["Thu Feb 15 00:00:00 2018","Sat Mar 03 00:00:00 2018") | one^2
 [6,7) | ["Sat Mar 03 00:00:00 2018","Wed Apr 04 00:00:00 2018") | one^2
(18 rows)

--
-- DELETE tests
--
-- Deleting with a missing column fails
DELETE FROM for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO 'Infinity'
WHERE id = '[5,6)';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO 'Infinity'
                       ^
-- Deleting with timestamps reversed fails
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM 'Infinity' TO '-Infinity'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Deleting with timestamps equal does nothing
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
WHERE id = '[3,4)';
-- Deleting with a closed/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2020-06-01'
WHERE id = '[5,6)';
-- Deleting with a closed/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO 'Infinity'
WHERE id = '[3,4)';
-- Deleting with an open/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '-Infinity' TO '2018-02-08'
WHERE id = '[1,2)';
-- Deleting with an open/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '-Infinity' TO 'Infinity'
WHERE id = '[6,7)';
-- DELETE with no WHERE clause
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2025-01-01' TO 'Infinity';
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |  name   
-------+---------------------------------------------------------+---------
 [1,2) | ["Thu Feb 08 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | three
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025") | five
(11 rows)
-- test that we run triggers on the UPDATE/DELETEd row and the INSERTed rows
CREATE FUNCTION for_portion_of_trigger()
RETURNS trigger
AS
$$
BEGIN
  RAISE NOTICE '% % % of %', TG_WHEN, TG_OP, NEW.valid_at, OLD.valid_at;
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;
$$
LANGUAGE plpgsql;
CREATE TRIGGER trg_for_portion_of_before_insert
  BEFORE INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_insert
  AFTER INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_before_update
  BEFORE UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_update
  AFTER UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_before_delete
  BEFORE DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_delete
  AFTER DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2021-01-01' TO '2022-01-01'
SET name = 'five^4'
WHERE id = '[5,6)';
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
NOTICE:  BEFORE UPDATE ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") of ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025")
NOTICE:  BEFORE INSERT ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") of <NULL>
NOTICE:  BEFORE INSERT ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER INSERT ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") of <NULL>
NOTICE:  AFTER INSERT ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER UPDATE ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") of ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025")
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2023-01-01' TO '2024-01-01'
WHERE id = '[5,6)';
NOTICE:  BEFORE DELETE <NULL> of ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025")
NOTICE:  BEFORE INSERT ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") of <NULL>
NOTICE:  BEFORE INSERT ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER INSERT ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") of <NULL>
NOTICE:  AFTER INSERT ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER DELETE <NULL> of ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025")
